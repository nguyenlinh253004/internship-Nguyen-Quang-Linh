// benchmark.js
const iterations = parseInt(process.argv[2], 10) || 100;
const results = {
  nextTick: [],
  setTimeout: [],
  setImmediate: []
};
let completed = 0;

function runTest() {
  console.log(`B·∫Øt ƒë·∫ßu benchmark v·ªõi ${iterations} l·∫ßn l·∫∑p...`);

  runBenchmark("nextTick", process.nextTick);
  runBenchmark("setTimeout", cb => setTimeout(cb, 0));
  runBenchmark("setImmediate", setImmediate);
}

function runBenchmark(type, scheduler) {
  const start = Date.now();
  for (let i = 0; i < iterations; i++) {
    scheduler(() => {
      results[type].push(Date.now() - start);
      if (results[type].length === iterations) {
        logResults(type);
        completed++;
        if (completed === 3) {
          console.log("üèÅ T·∫•t c·∫£ benchmark ƒë√£ ho√†n th√†nh.");
        }
      }
    });
  }
}

function logResults(type) {
  const times = results[type];
  const avg = times.reduce((a, b) => a + b, 0) / times.length;

  console.log(`\nüìä K·∫øt qu·∫£ ${type}:
- S·ªë l·∫ßn ho√†n th√†nh: ${times.length}/${iterations}
- Th·ªùi gian trung b√¨nh: ${avg.toFixed(2)}ms
- Nhanh nh·∫•t: ${Math.min(...times)}ms
- Ch·∫≠m nh·∫•t: ${Math.max(...times)}ms
- T·ªïng th·ªùi gian: ${times[times.length - 1]}ms`);
}

runTest();
